
<%+header%>
<!--
    This module is a demo to configure MTK' proprietary WiFi driver.
    Basic idea is to bypass uci and edit wireless profile (mt76xx.dat) directly.
    LuCI's WiFi configuration is more logical and elegent, but it's quite tricky to 
    translate uci into MTK's WiFi profile (like we did in "uci2dat").

    Hua Shao <nossiac@163.com>
-->

<%
local disp = require "luci.dispatcher"
-- local request  = disp.context.path
local request = disp.context.request
local mtkwifi = require("mtkwifi")
local devname = request[5]
local devs = mtkwifi.get_all_devs()
local dev = {}
for _,v in ipairs(devs) do
    if v.devname == devname then
        dev = v
    end
end

local cfgs = mtkwifi.load_profile(dev.profile)
local map_cfgs
local appliedMapEnableDiff
if pcall(require, "map_helper") then
    map_cfgs = mtkwifi.load_profile(mtkwifi.__easymesh_profile_path())
    local appliedMapDiffTable = mtkwifi.diff_profile(mtkwifi.__easymesh_profile_path())
    appliedMapEnableDiff = appliedMapDiffTable["MapEnable"] and appliedMapDiffTable["MapEnable"][2] or nil
end
%>

<script src="/luci-static/resources/monCon.js"></script>
<script type="text/javascript" src="<%=resource%>/cbi.js?v=git-17.250.41546-90ac861"></script>
<script type="text/javascript">
function hi(to) {
    var a;
    var x;
    var tabs = new Array();
    tabs.push("basic");
    tabs.push("adv");
<% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
    tabs.push("wds");
<% end %>
<% if cfgs["VOW_Airtime_Fairness_En"] then %>
    tabs.push("vow");
<% end %>
<% if dev.isPowerBoostSupported then%>
    tabs.push("power_boost");
<% end %>
    tabs.push("other");

    for (x in tabs)
    {
        if (tabs[x] != to) {
            a = document.getElementById('dev-cfg' + '-tab-' + tabs[x]);
            a.className = "cbi-tab-disabled";
            a = document.getElementById('dev-cfg' + '-' + tabs[x]);
            a.style.display = "none";
        }
    }
    a = document.getElementById('dev-cfg' + '-tab-' + to);
    a.className = "cbi-tab";
    a = document.getElementById('dev-cfg' + '-' + to);
    a.style.display = "";
}
</script>

<form method="post" name="cbi" action="<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "dev_cfg", devname)%>" enctype="multipart/form-data" onreset="return cbi_validate_reset(this)" onsubmit="return cbi_validate_form(this, 'Some fields are invalid, cannot save values!') && ValidateAllSettings()" autocomplete="false">
    <fieldset class="cbi-section">
        <legend> Device Configurations - <%=devname%> 
            <%local diff = mtkwifi.diff_profile(dev.profile)%>
            <%if next(diff) ~= nil then%>
                <span style="color:red;">( <a href="javascript:location.href='<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "reload", dev.devname)%>'">Click here</a> to apply changes)</span>
            <%end%>
        </legend>
        <div class="alert-message" id="EASYMESH_WARNING_MSG" style="display:none;">
            <strong>WARNING: EasyMesh feature is enabled!</strong>
        </div>
        <ul class="cbi-tabmenu">
            <li class="cbi-tab" id="dev-cfg-tab-basic">
                <a href="javascript:hi('basic');this.blur(); ">Basic</a>
            </li>
            <li class="cbi-tab-disabled" id="dev-cfg-tab-adv">
                <a href="javascript:hi('adv');this.blur(); ">Advanced</a>
            </li>
<% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
            <li class="cbi-tab-disabled" id="dev-cfg-tab-wds">
                <a href="javascript:hi('wds');this.blur(); ">WDS</a>
            </li>
<% end %>
<% if cfgs["VOW_Airtime_Fairness_En"] then %>
            <li class="cbi-tab-disabled" id="dev-cfg-tab-vow">
                <a href="javascript:this.blur(); hi('vow')">VoW</a>
            </li>
<% end %>
<% if dev.isPowerBoostSupported then%>
            <li class="cbi-tab-disabled" id="dev-cfg-tab-power_boost">
                <a href="javascript:this.blur(); hi('power_boost')">Power Boost</a>
            </li>
<% end %>
            <li class="cbi-tab-disabled" id="dev-cfg-tab-other">
                <a href="javascript:this.blur(); hi('other')">Others</a>
            </li>
        </ul>
        <table id="dev-cfg-basic" class="cbi-section-table">
            <tbody id="EASY_MESH_DEV_SETTINGS_TBODY" style="display:none">
                <tr>
                    <td>Mode</td>
                    <td>
                        <span id="EASY_MESH_WMODE_SPAN"></span>
                    </td>
                </tr>
                <tr>
                    <td>Channel</td>
                    <td>
                        <span id="EASY_MESH_CHANNEL_SPAN"></span>
                    </td>
                </tr>
            </tbody>
            <tbody id="DEV_CFG_BASIC_SETTINGS">
                <tr><th></th><td></td><td></td></tr>
                <tr>
                    <td>Mode</td>
                    <td>
                        <select style="width:auto" name="WirelessMode" id="WirelessMode" onchange="WirelessMode_onchange(this.options[this.options.selectedIndex].value)">
                            <!--
                                1. For non-DBDC card, display all the Wireless modes set in
                                   band key of mtkwifi.DevicePropertyMap table.
                                2. For DBDC card, display all 2.4G Wireless modes if dbdcBandName is 2.4G and
                                   display all 5G Wireless modes if dbdcBandName is 5G.
                            -->
                            <% for k,v in pairs(dev.WirelessModeList) do %>
                                <% if not dev.dbdc or dev.dbdcBandName == mtkwifi.band(k) then %>
                                    <option value="<%=k%>" <% if tonumber(dev.WirelessMode) == tonumber(k) then%> selected="selected"<% end %>><%=k%> - <%=v%></option>
                                <% end %>
                            <% end %>
                        </select>
                    </td>
                    <td></td>
                </tr>
                <!--
                <tr>
                    <td>Band</td>
                    <td>
                        <select style="width:auto" name="band">
                            <option value="11g">2.4G</option>
                            <option value="11a">5G</option>
                        </select>
                    </td>
                </tr>
                -->
                <tr>
                    <td>Channel</td>
                    <td>
                        <select style="width:auto; min-width:180px;" name="Channel" id="Channel" onchange="Channel_onchange(this.value)" <% if cfgs.ApCliEnable == "1" then %> disabled="disabled" <% end %>>
                        </select>
                    </td>
                    <td><% if cfgs.ApCliEnable == "1" then %> APClient/Repeater Mode. <% end %></td>
                </tr>
                <!--
                <tr>
                    <td>DBDC</td>
                    <td>
                        <input type="radio" name="DBDC_MODE" value="1" <% if cfgs.DBDC_MODE == "1" then %> checked="checked"<% end %>/> Enable
                        <input type="radio" name="DBDC_MODE" value="0" <% if cfgs.DBDC_MODE ~= "1" then %> checked="checked"<% end %>/> Disable
                    </td>
                    <td>Dual Band Dual Channel</td>
                </tr>
                -->
            </tbody>
        </table>
        <table id="dev-cfg-adv" class="cbi-section-table" style="display:none">
            <tr><th></th><td></td><td></td></tr>
            <!--
            <tr>
                <td style="width:300px;">SSID Broadcast</td>
                <td>
                    <select style="width:auto">
                        <option value="1">Enable</option>
                        <option value="0">Disable</option>
                    </select>
                </td>
            </tr>
            <tr>
                <td>AP Isolation</td>
                <td>
                    <select style="width:auto">
                        <option value="1">Enable</option>
                        <option value="0">Disable</option>
                    </select>
                </td>
            </tr>
            -->
            <% if cfgs.E2pAccessMode then %>
            <tr>
                <td>E2pAccessMode</td>
                <td>
                    <select style="width:auto" name="E2pAccessMode">
                        <option value="1" <% if cfgs.E2pAccessMode == "1" then %> selected="selected"<% end%>>EFUSE</option>
                        <option value="2" <% if cfgs.E2pAccessMode == "2" then %> selected="selected"<% end%>>FLASH</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <% end %>
            <% if cfgs.WHNAT then %>
            <tr>
                <td>Wi-Fi HW NAT</td>
                <td>
                    <select style="width:auto" name="WHNAT">
                        <option value="1" <% if cfgs.WHNAT == "1" then %> selected="selected"<% end%>> Enable</option>
                        <option value="0" <% if cfgs.WHNAT ~= "1" then %> selected="selected"<% end%>> Disable</option>
                    </select>
                </td>
                <td>Supported by MT7615</td>
            </tr>
            <% end %>
            <tr>
                <td>Country Code</td>
                <td>
                    <select name="CountryCode" style="width:auto" id="CountryCode" onchange="CountryCode_onchange()">
                        <option value="US" id="advCountryCodeUS" <% if cfgs.CountryCode == "US" then %> selected="selected"<% end %>>US (United States)</option>
                        <option value="JP" id="advCountryCodeJP" <% if cfgs.CountryCode == "JP" then %> selected="selected"<% end %>>JP (Japan)</option>
                        <option value="FR" id="advCountryCodeFR" <% if cfgs.CountryCode == "FR" then %> selected="selected"<% end %>>FR (France)</option>
                        <option value="TW" id="advCountryCodeTW" <% if cfgs.CountryCode == "TW" then %> selected="selected"<% end %>>TW (Taiwan)</option>
                        <option value="IE" id="advCountryCodeIE" <% if cfgs.CountryCode == "IE" then %> selected="selected"<% end %>>IE (Ireland)</option>
                        <option value="HK" id="advCountryCodeHK" <% if cfgs.CountryCode == "HK" then %> selected="selected"<% end %>>HK (Hong Kong)</option>
                        <option value="NONE" id="advCountryCodeNONE"<% if cfgs.CountryCode == "NONE" then %> selected="selected"<% end %>>NONE</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Country Region</td>
                <td>
                    <select style="width:auto; min-width:180px;" name="__cr" id="__cr" onchange="CountryRegion_onchange(this.value)">
                    </select>
                </td>
                <td><span id="__cRegionMsg"></span></td>
            </tr>
            <tr>
                <td>HT TX Stream</td>
                <td>
                    <select name="HT_TxStream" style="width:auto">
                        <% if dev.maxTxStream then %>
                            <% for txStreamVal=1,dev.maxTxStream do%>
                                <option value="<%=txStreamVal%>" <% if tonumber(cfgs.HT_TxStream) == txStreamVal then %>selected="selected"<% end %>><%=txStreamVal%></option>
                            <% end %>
                        <% else %>
                            <option value="1" <% if cfgs.HT_TxStream == "1" then %>selected="selected"<% end %>>1</option>
                            <option value="2" <% if cfgs.HT_TxStream == "2" then %>selected="selected"<% end %>>2</option>
                            <option value="3" <% if cfgs.HT_TxStream == "3" then %>selected="selected"<% end %>>3</option>
                            <option value="4" <% if cfgs.HT_TxStream == "4" then %>selected="selected"<% end %>>4</option>
                        <% end %>
                    </select>
                </td>
                <td><span><% if dev.maxTxStream then %><strong><%=dev.devname%></strong> supports maximum <strong><%=dev.maxTxStream%></strong> HT TX Stream<% end %></span></td>
            </tr>
            <tr>
                <td>HT RX Stream</td>
                <td>
                    <select name="HT_RxStream" style="width:auto">
                        <% if dev.maxRxStream then %>
                            <% for rxStreamVal=1,dev.maxRxStream do%>
                                <option value="<%=rxStreamVal%>" <% if tonumber(cfgs.HT_RxStream) == rxStreamVal then %>selected="selected"<% end %>><%=rxStreamVal%></option>
                            <% end %>
                        <% else %>
                            <option value="1" <% if cfgs.HT_RxStream == "1" then %>selected="selected"<% end %>>1</option>
                            <option value="2" <% if cfgs.HT_RxStream == "2" then %>selected="selected"<% end %>>2</option>
                            <option value="3" <% if cfgs.HT_RxStream == "3" then %>selected="selected"<% end %>>3</option>
                            <option value="4" <% if cfgs.HT_RxStream == "4" then %>selected="selected"<% end %>>4</option>
                        <% end %>
                    </select>
                </td>
                <td><span><% if dev.maxRxStream then %><strong><%=dev.devname%></strong> supports maximum <strong><%=dev.maxRxStream%></strong> HT RX Stream<% end %></span></td>
            </tr>
            <tr>
                <td>Operating Mode</td>
                <td>
                    <select style="width:auto" name="HT_OpMode">
                        <option value="0" <% if cfgs.HT_OpMode == "0" then %> selected="selected"<% end%>>Mixed Mode</option>
                        <option value="1" <% if cfgs.HT_OpMode == "1" then %> selected="selected"<% end%>>Green Field</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>HT Guard Interval</td>
                <td>
                    <select style="width:auto" name="HT_GI">
                        <option value="0" <% if cfgs.HT_GI == "0" then %> selected="selected"<% end%>>Long</option>
                        <option value="1" <% if cfgs.HT_GI == "1" then %> selected="selected"<% end%>>Short</option>
                        <option value="2" <% if cfgs.HT_GI == "2" then %> selected="selected"<% end%>>Auto</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Channel BandWidth</td>
                <td>
                    <select style="width:auto" name="__bw" id="__bw" onchange="Bw_onchange(this.options[this.options.selectedIndex].value)">
                        <option value="20" <% if dev.__bw == "20" then %> selected="selected"<% end%>>20 MHz</option>
                        <option value="40" <% if dev.__bw == "40" then %> selected="selected"<% end%>>40 MHz</option>
                        <option value="60" <% if dev.__bw == "60" then %> selected="selected"<% end%>>20/40 MHz</option>
                        <option value="80" <% if dev.__bw == "80" then %> selected="selected"<% end%>>80 MHz</option>
                        <option value="160" <% if dev.__bw == "160" then %> selected="selected"<% end%>>160 MHz</option>
                        <option value="161" <% if dev.__bw == "161" then %> selected="selected"<% end%>>80+80 MHz</option>
                    </select>
                </td>
                <td><span id="__chBwMsg"></span></td>
            </tr>
            <tr>
                <td>40MHz HT Ext Channel</td>
                <td>
                    <select style="width:auto; min-width:180px;" name="HT_EXTCHA" id="HT_EXTCHA" <% if cfgs.ApCliEnable == "1" or dev.__bw ~= "40" or dev.__bw ~= "60" then %> disabled="disabled" <% end %>>
                    </select>
                </td>
                <td><% if cfgs.ApCliEnable == "1" then %> APClient/Repeater Mode. <% end %></td>
            </tr>
            <tr>
                <td>80MHz Second VHT Channel</td>
                <td>
                    <select style="width:auto; min-width:180px;" name="VHT_Sec80_Channel" id="VHT_Sec80_Channel" <% if cfgs.ApCliEnable == "1" or dev.__bw ~= "161" then %> disabled="disabled" <% end %>>
                    </select>
                </td>
                <td><% if cfgs.ApCliEnable == "1" then %> APClient/Repeater Mode. <% end %></td>
            </tr>
            <tr>
                <td>Reverse Direction Grant (RDG)</td>
                <td>
                    <input type="radio" name="HT_RDG" value="1" <% if cfgs.HT_RDG == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_RDG" value="0" <% if cfgs.HT_RDG == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <!--
            <tr>
                <td>Extension Channel</td>
                <td>
                    <select style="width:auto">
                        <option value="">Legacy</option>
                        <option value="n">N</option>
                        <option value="ac">AC</option>
                        <option value="dbdc">DBDC</option>
                    </select>
                </td>
            </tr>
            -->
            <tr>
                <td>STBC</td>
                <td>
                    <input type="radio" name="HT_STBC" value="1" <% if cfgs.HT_STBC == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_STBC" value="0" <% if cfgs.HT_STBC == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>A-MSDU</td>
                <td>
                    <input type="radio" name="HT_AMSDU" value="1" <% if cfgs.HT_AMSDU == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_AMSDU" value="0" <% if cfgs.HT_AMSDU == "0" then %> checked="checked"<% end %>/> Disable
               </td>
                <td></td>
            </tr>
            <tr>
                <td>Auto Block ACK</td>
                <td>
                    <input type="radio" name="HT_AutoBA" value="1" <% if cfgs.HT_AutoBA == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_AutoBA" value="0" <% if cfgs.HT_AutoBA == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Decline BA Request</td>
                <td>
                    <input type="radio" name="HT_BADecline" value="1" <% if cfgs.HT_BADecline == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_BADecline" value="0" <% if cfgs.HT_BADecline == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>HT Disallow TKIP</td>
                <td>
                    <input type="radio" name="HT_DisallowTKIP" value="1" <% if cfgs.HT_DisallowTKIP == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_DisallowTKIP" value="0" <% if cfgs.HT_DisallowTKIP == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>HT LDPC</td>
                <td>
                    <input type="radio" name="HT_LDPC" value="1" <% if cfgs.HT_LDPC == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_LDPC" value="0" <% if cfgs.HT_LDPC == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>VHT Short GI</td>
                <td>
                    <select style="width:auto" name="VHT_SGI">
                        <option value="0" <% if cfgs.VHT_SGI == "0" then %> selected="selected"<% end%>>Long</option>
                        <option value="1" <% if cfgs.VHT_SGI == "1" then %> selected="selected"<% end%>>Short</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>VHT STBC</td>
                <td>
                    <input type="radio" name="VHT_STBC" value="1" <% if cfgs.VHT_STBC == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="VHT_STBC" value="0" <% if cfgs.VHT_STBC == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>VHT BW Signaling</td>
                <td>
                    <input type="radio" name="VHT_BW_SIGNAL" value="1" <% if cfgs.VHT_BW_SIGNAL == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="VHT_BW_SIGNAL" value="0" <% if cfgs.VHT_BW_SIGNAL == "0" then %> checked="checked"<% end %>/> Disable
                    <input type="radio" name="VHT_BW_SIGNAL" value="0" <% if cfgs.VHT_BW_SIGNAL == "2" then %> checked="checked"<% end %>/> Dynamic
                </td>
                <td></td>
            </tr>
            <tr>
                <td>VHT LDPC</td>
                <td>
                    <input type="radio" name="VHT_LDPC" value="1" <% if cfgs.VHT_LDPC == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="VHT_LDPC" value="0" <% if cfgs.VHT_LDPC == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>BG Protection Mode</td>
                <td>
                    <select name="BGProtection" style="width:auto">
                        <option value="0" <% if cfgs.BGProtection == "0" then %>selected="selected"<% end %>>Auto</option>
                        <option value="1" <% if cfgs.BGProtection == "1" then %>selected="selected"<% end %>>Always On</option>
                        <option value="2" <% if cfgs.BGProtection == "2" then %>selected="selected"<% end %>>Always Off</option>
                    </select>
                </td>
                <td></td>
            </tr>
            <tr>
                <td>HT Protection</td>
                <td>
                    <input type="radio" name="HT_PROTECT" value="1" <% if cfgs.HT_PROTECT == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="HT_PROTECT" value="0" <% if cfgs.HT_PROTECT == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Beacon Interval</td>
                <td>
                    <input name="BeaconPeriod" id="BeaconPeriod" value="<%=cfgs.BeaconPeriod%>" />ms(range 20-999, default 100)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Data Beacon Rate (DTIM)</td>
                <td>
                    <input name="DtimPeriod" id="DtimPeriod" value="<%=cfgs.DtimPeriod%>" />ms(range 1-255, default 1)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Fragment Threshold</td>
                <td>
                    <input name="FragThreshold" id="FragThreshold" value="<%=cfgs.FragThreshold%>" />(range 256-2346, default 2346)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>RTS Threshold</td>
                <td>
                    <input name="RTSThreshold" id="RTSThreshold" value="<%=cfgs.RTSThreshold%>" />(range 1-2347, default 2347)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>TX Power</td>
                <td>
                    <input name="TxPower" id="TxPower" value="<%=cfgs.TxPower%>" />dbm(range 1-100, default 100)
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Short Preamble</td>
                <td>
                    <input type="radio" name="TxPreamble" value="1" <% if cfgs.TxPreamble == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="TxPreamble" value="0" <% if cfgs.TxPreamble == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Short Slot</td>
                <td>
                    <input type="radio" name="ShortSlot" value="1" <% if cfgs.ShortSlot == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="ShortSlot" value="0" <% if cfgs.ShortSlot == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>TX Burst</td>
                <td>
                    <input type="radio" name="TxBurst" value="1" <% if cfgs.TxBurst == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="TxBurst" value="0" <% if cfgs.TxBurst == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>Packet Aggregate</td>
                <td>
                    <input type="radio" name="PktAggregate" value="1" <% if cfgs.PktAggregate == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="PktAggregate" value="0" <% if cfgs.PktAggregate == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>802.11H</td>
                <td>
                    <input type="radio" name="IEEE80211H" value="1" <% if cfgs.IEEE80211H == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="IEEE80211H" value="0" <% if cfgs.IEEE80211H == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>APSD Capable</td>
                <td>
                    <input type="radio" name="APSDCapable" value="1" <% if cfgs.APSDCapable == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="APSDCapable" value="0" <% if cfgs.APSDCapable == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>DLS Capable</td>
                <td>
                    <input type="radio" name="DLSCapable" value="1" <% if cfgs.DLSCapable == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="DLSCapable" value="0" <% if cfgs.DLSCapable == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
            <tr>
                <td>IGMP Snooping</td>
                <td>
                    <input type="radio" name="IgmpSnEnable" value="1" <% if cfgs.IgmpSnEnable == "1" then %> checked="checked"<% end %>/> Enable
                    <input type="radio" name="IgmpSnEnable" value="0" <% if cfgs.IgmpSnEnable == "0" then %> checked="checked"<% end %>/> Disable
                </td>
                <td></td>
            </tr>
        </table>

<% if cfgs["VOW_Airtime_Fairness_En"] then %>
        <div id="dev-cfg-vow" style="display:none">
            <fieldset class="cbi-section">
                <legend> <a name="apcli_scan_section">Air-time Fairness (ATF)</a></legend>

                <p><b>This allows you to control how the stations assiciated with a SSID share the air-time. So it is a sort of QoS scheme for wireless stations.</b></p>
                <p>There are 2 modes available:</p>
                <ol>
                    <li>All stations share air-time equally.</li>
                    <li>Stations will be divide into several groups, and we cab assign different air-time ration to those groups.</li>
                </ol>

                <input type="hidden" id="VOW_Airtime_Fairness_En" name="VOW_Airtime_Fairness_En" value="<%=cfgs.VOW_Airtime_Fairness_En or 0%>"/>
                <% if cfgs.VOW_Airtime_Fairness_En == "1" then %>
                <div class="cbi-button cbi-button-remove" value="1" style="width:200px" onclick="toggle_atf(this);">
                    Disable ATF
                </div>
                <% else %>
                <div class="cbi-button cbi-button-add" value="0" style="width:200px" onclick="toggle_atf(this);">
                    Enable ATF
                </div>
                <% end %>
                <!-- <p>
                    <button class="cbi-button cbi-button-add"  style="width:200px" onclick="return false;">
                        Weighted Airtime Fairness
                    </button>
                </p> -->

            </fieldset>
            <fieldset class="cbi-section">
                <legend> <a name="apcli_scan_section">Air-time Control (ATC)</a></legend>
                <p><b>When you have multiple SSID enabled, this allows you to control how these SSIDs share airtime. So this is a sort of QoS scheme for SSID.</b></p>
                <p>There are 2 aspects you can control, If you enable both, the rules will merge togehter:</p>
                <ol>
                    <li>by Throughput Quota</li>
                    <li>by Airtime Ratio</li>
                </ol>

                <input type="hidden" id="VOW_BW_Ctrl" name="VOW_BW_Ctrl" value="<%=cfgs.VOW_BW_Ctrl or 0%>"/>
                <% if cfgs.VOW_BW_Ctrl == "1" then %>
                <p class="cbi-button cbi-button-remove"  style="width:200px" value="1" onclick="toggle_atc(this);">
                    Disable ATC
                </p>
                <% else %>
                <p class="cbi-button cbi-button-add" style="width:200px" value="0" onclick="toggle_atc(this);">
                    Enable ATC
                </p>
                <% end %>

                <br/>
                <!-- 
                VOW_Rate_Ctrl_En
                VOW_Group_Min_Rate
                VOW_Group_Max_Rate

                VOW_Airtime_Ctrl_En
                VOW_Group_Min_Ratio
                VOW_Group_Max_Ratio
                 -->
                <table id="atc-table" <% if cfgs.VOW_BW_Ctrl ~= "1" then %>style="display: none;" <% end %>>
                    <tr>
                        <th>SSID</th>
                        <th>ATC</th>
                        <th>Min</th>
                        <th>Max</th>
                    </tr>
                    <%
                    for _,vif in ipairs(dev.vifs) do
                    %>
                    <tr>
                        <td rowspan="2"><img src="/luci-static/resources/icons/wifi_big.png" style="float:left; margin-right:10px"><%=vif.__ssid%></td>
                        <td>
                            <input type="checkbox" name="__atc_vif<%=vif.vifidx%>_tp" value="1" 
                            <% if vif.__atc_tp == "1"  then %>checked="checked"<% end %>>
                            <label style="margin: 0 1em;">TP
                        </td>
                        <td>
                            <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_min_tp" value="<%=vif.__atc_min_tp%>"> Mbps
                        </td>
                        <td>
                            <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_max_tp" value="<%=vif.__atc_max_tp%>"> Mbps
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="checkbox" name="__atc_vif<%=vif.vifidx%>_at" value="1" 
                            <% if vif.__atc_at == "1" then %>checked="checked"<% end %>>
                            <label style="margin: 0 1em;">AT</label>
                        </td>
                        <td>
                            <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_min_at" value="<%=vif.__atc_min_at%>"> %
                        </td>
                        <td>
                            <input type="text" class="shortinput" name="__atc_vif<%=vif.vifidx%>_max_at" value="<%=vif.__atc_max_at%>"> %
                        </td>
                    </tr>

                    <%
                    end
                    %>
                </table>

            </fieldset>
            <fieldset class="cbi-section">
                <legend> <a name="apcli_scan_section">Apply to RX</a></legend>
                <p>a
                   <b>By default, ATF and ATC only work for TX(transmit). This option will apply ATF and ATC to RX (receive).</b>
                </p>
                <p>
                    <input type="checkbox" name="VOW_RX_En" value="1" <% if cfgs.VOW_RX_En == "1" then %> checked="checked"<%end%>> Apply both ATC &amp; ATF to RX
                </p>
            </fieldset>
        </div>
<% end %>
<!-- 
        <div id="dev-cfg-raw" style="display:none">
            <fieldset class="cbi-section">
                <legend> Raw Configurations ( Edit WiFi profile directly )</legend>
                <p> <span style="color: red"><b>WARNING</b> : DO NOT MESS IT IF YOU DON'T UNDERSTAND IT!</span></p>
                <textarea name="raw" id="raw" style="width:98%; height: 200px;"><%
                    local fd = io.open(dev.profile)
                    for line in fd:lines() do
                        print(line)
                    end
                %></textarea>
            </fieldset>
        </div>
 -->
        <table id="dev-cfg-other" class="cbi-section-table" style="display:none">
            <tr><th></th><td></td><td></td></tr>
            <% if cfgs.MUTxRxEnable then %>
            <tr>
                <td>Beam Forming &amp; MIMO <%=dev.__mimo%></td>
                <td>
                    <select name="__mimo" autocomplete="off" >
                        <option value="0"<% if tonumber(dev.__mimo) == 0 then %> selected="selected"<% end %>> ETxBF (SU) </option>
                        <option value="1"<% if tonumber(dev.__mimo) == 1 then %> selected="selected"<% end %>> ITxBF (SU) </option>
                        <option value="2"<% if tonumber(dev.__mimo) == 2 then %> selected="selected"<% end %>> ITxBF+ETxBF (SU) </option>
                        <% if not dev.mimoBand or dev.mimoBand == dev.dbdcBandName then %>
                            <option value="3"<% if tonumber(dev.__mimo) == 3 then %> selected="selected"<% end %>> MU (SU ETxBF+MU-MIMO) </option>
                            <option value="4"<% if tonumber(dev.__mimo) == 4 then %> selected="selected"<% end %>> ITxBF+MU (I+E+MU) </option>
                        <% end %>
                        <option value="5"<% if tonumber(dev.__mimo) == 5 then %> selected="selected"<% end %>> Disable TxBF (SU BF and MU-MIMO) </option>
                    </select>
                </td>
                <td></td>
            </tr>
            <% end %>

        </table>
        <% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
            <table id="dev-cfg-wds" class="cbi-section-table" style="display:none">
                <tr><th></th><td></td><td></td></tr>
                <tr>
                    <td>WDS Mode</td>
                    <td>
                        <select name="WdsEnable" id="WdsEnable" size="1" onchange="WdsModeOnChange(this.value)">
                            <option value="0"<% if cfgs.WdsEnable == "0" then %> selected="selected"<% end %>>Disable</option>
                            <option value="4"<% if cfgs.WdsEnable == "4" then %> selected="selected"<% end %>>Lazy Mode</option>
                            <option value="2"<% if cfgs.WdsEnable == "2" then %> selected="selected"<% end %>>Bridge Mode</option>
                            <option value="3"<% if cfgs.WdsEnable == "3" then %> selected="selected"<% end %>>Repeater Mode</option>
                        </select>
                    </td>
                    <td></td>
                </tr>
                <tr id="row-wds-phy-mode" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>Phy Mode</td>
                    <td>
                        <select name="WdsPhyMode" id="WdsPhyMode" size="1" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> disabled <% end %>>
                            <% _wdsPhyMode=cfgs.WdsPhyMode and cfgs.WdsPhyMode:upper() %>
                            <option value="CCK;CCK;CCK;CCK"<% if _wdsPhyMode == "CCK;CCK;CCK;CCK" then %> selected="selected"<% end %>>CCK</option>
                            <option value="OFDM;OFDM;OFDM;OFDM"<% if _wdsPhyMode == "OFDM;OFDM;OFDM;OFDM" then %> selected="selected"<% end %>>OFDM</option>
                            <option value="HTMIX;HTMIX;HTMIX;HTMIX"<% if _wdsPhyMode == "HTMIX;HTMIX;HTMIX;HTMIX" then %> selected="selected"<% end %>>HTMIX</option>
                            <option value="GREENFIELD;GREENFIELD;GREENFIELD;GREENFIELD"<% if _wdsPhyMode == "GREENFIELD;GREENFIELD;GREENFIELD;GREENFIELD" then %> selected="selected"<% end %>>GREENFIELD</option>
                            <option value="VHT;VHT;VHT;VHT"<% if _wdsPhyMode == "VHT;VHT;VHT;VHT" then %> selected="selected"<% end %>>VHT</option>
                        </select>
                    </td>
                    <td><span id="__wdsPhyModeMsg"></span></td>
                </tr>
                <tr id="row-wds-enc-type0" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>EncrypType</td>
                    <td>
                        <select name="__wds_encryp_type0" id="__wds_encryp_type0" size="1" onchange="WdsSecurityOnChange(0,this.value)" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> disabled <% end %>>
                            <% _wdsEncType=cfgs.WdsEncrypType and cfgs.WdsEncrypType:upper():match("^(%a+)") %>
                            <option value="NONE"<% if _wdsEncType == "NONE" then %> selected="selected"<% end %>>NONE</option>
                            <option value="WEP"<% if _wdsEncType == "WEP" then %> selected="selected"<% end %>>WEP</option>
                            <option value="TKIP"<% if _wdsEncType == "TKIP" then %> selected="selected"<% end %>>TKIP</option>
                            <option value="AES"<% if _wdsEncType == "AES" then %> selected="selected"<% end %>>AES</option>
                        </select>
                    </td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-key0" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>Encryp Key</td>
                    <td><input type="text" id="Wds0Key" name="Wds0Key" size=28 maxlength=64 value="<%=cfgs.Wds0Key%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or not _wdsEncType or _wdsEncType == "NONE" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-type1" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>EncrypType</td>
                    <td>
                        <select name="__wds_encryp_type1" id="__wds_encryp_type1" size="1" onchange="WdsSecurityOnChange(1,this.value)" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> disabled <% end %>>
                            <% _wdsEncType=cfgs.WdsEncrypType and cfgs.WdsEncrypType:upper():match("^%a+;(%a+)") %>
                            <option value="NONE"<% if _wdsEncType == "NONE" then %> selected="selected"<% end %>>NONE</option>
                            <option value="WEP"<% if _wdsEncType == "WEP" then %> selected="selected"<% end %>>WEP</option>
                            <option value="TKIP"<% if _wdsEncType == "TKIP" then %> selected="selected"<% end %>>TKIP</option>
                            <option value="AES"<% if _wdsEncType == "AES" then %> selected="selected"<% end %>>AES</option>
                        </select>
                    <td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-key1" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>Encryp Key</td>
                    <td><input type="text" id="Wds1Key" name="Wds1Key" size=28 maxlength=64 value="<%=cfgs.Wds1Key%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or not _wdsEncType or _wdsEncType == "NONE" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-type2" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>EncrypType</td>
                    <td>
                        <select name="__wds_encryp_type2" id="__wds_encryp_type2" size="1" onchange="WdsSecurityOnChange(2,this.value)" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> disabled <% end %>>
                            <% _wdsEncType=cfgs.WdsEncrypType and cfgs.WdsEncrypType:upper():match("^%a+;%a+;(%a+)") %>
                            <option value="NONE"<% if _wdsEncType == "NONE" then %> selected="selected"<% end %>>NONE</option>
                            <option value="WEP"<% if _wdsEncType == "WEP" then %> selected="selected"<% end %>>WEP</option>
                            <option value="TKIP"<% if _wdsEncType == "TKIP" then %> selected="selected"<% end %>>TKIP</option>
                            <option value="AES"<% if _wdsEncType == "AES" then %> selected="selected"<% end %>>AES</option>
                        </select>
                    <td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-key2" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>Encryp Key</td>
                    <td><input type="text" id="Wds2Key" name="Wds2Key" size=28 maxlength=64 value="<%=cfgs.Wds2Key%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or not _wdsEncType or _wdsEncType == "NONE" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-type3" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>EncrypType</td>
                    <td>
                        <select name="__wds_encryp_type3" id="__wds_encryp_type3" size="1" onchange="WdsSecurityOnChange(3,this.value)" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> disabled <% end %>>
                            <% _wdsEncType=cfgs.WdsEncrypType and cfgs.WdsEncrypType:upper():match("^%a+;%a+;%a+;(%a+)") %>
                            <option value="NONE"<% if _wdsEncType == "NONE" then %> selected="selected"<% end %>>NONE</option>
                            <option value="WEP"<% if _wdsEncType == "WEP" then %> selected="selected"<% end %>>WEP</option>
                            <option value="TKIP"<% if _wdsEncType == "TKIP" then %> selected="selected"<% end %>>TKIP</option>
                            <option value="AES"<% if _wdsEncType == "AES" then %> selected="selected"<% end %>>AES</option>
                        </select>
                    <td>
                    <td></td>
                </tr>
                <tr id="row-wds-enc-key3" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" then %> style="display:none" <% end %>>
                    <td>Encryp Key</td>
                    <td><input type="text" id="Wds3Key" name="Wds3Key" size=28 maxlength=64 value="<%=cfgs.Wds3Key%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or not _wdsEncType or _wdsEncType == "NONE" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <input type="hidden" id="WdsEncrypType" name="WdsEncrypType" value="<%=cfgs.WdsEncrypType%>">
                <tr id="row-wds-ap-mac-addr0" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> style="display:none" <% end %>>
                    <td>AP MAC Address</td>
                    <% _wdsMac=cfgs.WdsList and cfgs.WdsList:match("^([%x:]+)") %>
                    <td><input type="text" id="__wds_mac_0" name="__wds_mac_0" size=20 maxlength=17 value="<%=_wdsMac%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-ap-mac-addr1" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> style="display:none" <% end %>>
                    <td>AP MAC Address</td>
                    <% _wdsMac=cfgs.WdsList and cfgs.WdsList:match("^[%x:]+;([%x:]+)") %>
                    <td><input type="text" id="__wds_mac_1" name="__wds_mac_1" size=20 maxlength=17 value="<%=_wdsMac%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-ap-mac-addr2" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> style="display:none" <% end %>>
                    <td>AP MAC Address</td>
                    <% _wdsMac=cfgs.WdsList and cfgs.WdsList:match("^[%x:]+;[%x:]+;([%x:]+)") %>
                    <td><input type="text" id="__wds_mac_2" name="__wds_mac_2" size=20 maxlength=17 value="<%=_wdsMac%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <tr id="row-wds-ap-mac-addr3" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> style="display:none" <% end %>>
                    <td>AP MAC Address</td>
                    <% _wdsMac=cfgs.WdsList and cfgs.WdsList:match("^[%x:]+;[%x:]+;[%x:]+;([%x:]+)") %>
                    <td><input type="text" id="__wds_mac_3" name="__wds_mac_3" size=20 maxlength=17 value="<%=_wdsMac%>" <% if not cfgs.WdsEnable or cfgs.WdsEnable == "0" or cfgs.WdsEnable == "4" then %> disabled <% end %>></td>
                    <td></td>
                </tr>
                <input type="hidden" id="WdsList" name="WdsList" value="<%=cfgs.WdsList%>">
            </table>
        <% end %>
        <% if dev.isPowerBoostSupported then%>
            <table id="dev-cfg-power_boost" class="cbi-section-table" style="display:none">
                <tr>
                    <td colspan="3">Power Boost</td>
                    <td colspan="2">
                        <input type="radio" id="pbEnable" name="PowerUpenable" value="1" onClick="togglePowerBoost(1)" <% if cfgs.PowerUpenable == "1" then %> checked <% end %>>Enable
                    </td>
                    <td colspan="2">
                        <input type="radio" id="pbDisable" name="PowerUpenable" value="0" onClick="togglePowerBoost(0)" <% if cfgs.PowerUpenable ~= "1" then %> checked <% end %>>Disable
                    </td>
                </tr>
                <tr id="__applyPbRow" <% if cfgs.PowerUpenable ~= "1" then %> style="display:none" <% end %>>
                    <td colspan="7" style="text-align:center">
                        <input type="button" id="__applyPb" class="cbi-button cbi-button-apply" value="Save and Apply Power Boost Settings Only" onclick="applyPowerBoostSettings(this)" <% if cfgs.PowerUpenable ~= "1" then %> disabled <% end %>>
                    </td>
                </tr>
                <tr id="__pbLoadingRow" style="display:none">
                    <td colspan="7" style="text-align:center">
                        <img src="<%=resource%>/icons/loading.gif" alt="<%:Loading%>" style="vertical-align:middle;" />
                    &nbsp;&nbsp;&nbsp; Please wait while the Power Boost settings are being applied.
                    </td>
                </tr>
                <input type="hidden" id="PowerUpCckOfdm" name="PowerUpCckOfdm" value="<%=cfgs.PowerUpCckOfdm%>">
                <input type="hidden" id="PowerUpHT20" name="PowerUpHT20" value="<%=cfgs.PowerUpHT20%>">
                <input type="hidden" id="PowerUpHT40" name="PowerUpHT40" value="<%=cfgs.PowerUpHT40%>">
                <input type="hidden" id="PowerUpVHT20" name="PowerUpVHT20" value="<%=cfgs.PowerUpVHT20%>">
                <input type="hidden" id="PowerUpVHT40" name="PowerUpVHT40" value="<%=cfgs.PowerUpVHT40%>">
                <input type="hidden" id="PowerUpVHT80" name="PowerUpVHT80" value="<%=cfgs.PowerUpVHT80%>">
                <input type="hidden" id="PowerUpVHT160" name="PowerUpVHT160" value="<%=cfgs.PowerUpVHT160%>">
            </table>
        <% end %>
    </fieldset>
    <div class="cbi-page-actions">

        <input class="cbi-button cbi-button-apply" name="__apply" value="Save and Apply" type="submit">
        <input class="cbi-button cbi-button-apply" value="Save" type="submit">
        <input class="cbi-button cbi-button-reset" value="Reset" type="reset">

    </div>
</form>

 
<form method="post" name="cbi2" action="<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "dev_cfg_raw", devname)%>" enctype="multipart/form-data" onreset="return cbi_validate_reset(this)" onsubmit="return cbi_validate_form(this, 'Some fields are invalid, cannot save values!')" autocomplete="off">
    <fieldset class="cbi-section">
        <legend> Raw Configurations ( Edit WiFi profile directly )</legend>
        <p> <span style="color: red"><b>WARNING</b></span> : DO NOT MESS WITH IT IF YOU DON'T UNDERSTAND IT!</p>
        <textarea name="raw" id="raw" style="width:98%; height: 200px;"><%
            local fd = io.open(dev.profile)
            for line in fd:lines() do
                print(line)
            end
        %></textarea>
    </fieldset>
    <div class="cbi-page-actions">
        <input class="cbi-button cbi-button-reset" value="Reset" onclick="location.href='<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "dev_cfg_view", devname)%>'" type="button">
        <input class="cbi-button cbi-button-apply" id="save" value="Save" type="submit" onclick="if (confirm('You are going to overwrite the profile directly, are you sure?')) return true; else return false;">
        <input class="cbi-button cbi-button-apply" id="reset" value="Restore Profile to Factory Setting" type="button" onclick="if (confirm('You are going to reset the profile of <%=devname%> to factory default, are you sure?')) location.href='<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "reset_to_defaults", devname)%>'">
    </div>
</form>


<script type="text/javascript">
    <% if dev.isPowerBoostSupported then%>
        function ValidatePowerBoost()
        {
            var pbDatName = ["PowerUpCckOfdm","PowerUpHT20","PowerUpHT40","PowerUpVHT20","PowerUpVHT40","PowerUpVHT80","PowerUpVHT160"];
            var rateName = {
                PowerUpCckOfdm:["CCK_1M2M","CCK_5M11M","OFDM_6M_9M","OFDM_12M_18M","OFDM_24M_36M","OFDM_48M","OFDM_54M"],
                PowerUpHT20:["HT20_MCS0","None","HT20_MCS1_2","HT20_MCS3_4","HT20_MCS5","HT20_MCS6","HT20_MCS7"],
                PowerUpHT40:["HT40_MCS0","HT40_MCS32","HT40_MCS1_2","HT40_MCS3_4","HT40_MCS5","HT40_MCS6","HT40_MCS7"],
                PowerUpVHT20:["VHT20_MCS0","VHT20_MCS1_2","VHT20_MCS3_4","VHT20_MCS5_6","VHT20_MCS7","VHT20_MCS8","VHT20_MCS9"],
                PowerUpVHT40:["VHT40_BPSK","VHT40_QPSK","VHT40_16QAM","VHT40_64QAM_MSC5_6","VHT40_64QAM_MSC7","VHT40_64QAM_MSC8","VHT40_64QAM_MSC9"],
                PowerUpVHT80:["VHT80_BPSK","VHT80_QPSK","VHT80_16QAM","VHT80_64QAM_MSC5_6","VHT80_64QAM_MSC7","VHT80_64QAM_MSC8","VHT80_64QAM_MSC9"],
                PowerUpVHT160:["VHT160_BPSK","VHT160_QPSK","VHT160_16QAM","VHT160_64QAM_MSC5_6","VHT160_64QAM_MSC7","VHT160_64QAM_MSC8","VHT160_64QAM_MSC9"]
            };
            if(document.getElementById("pbDisable").checked){
                return true;
            }
            for (var mIdx = 0; mIdx < pbDatName.length; mIdx++){
                var pbMergedStr = "";
                for(var rIdx=0; rIdx < rateName[pbDatName[mIdx]].length ; rIdx++){
                    inp = document.getElementById(rateName[pbDatName[mIdx]][rIdx]);
                    var inpVal = Number(inp.value);
                    if(isNaN(inpVal) || !/(^-[1-9]$|^\d$|^[1-9][0-9]$)/.test(inp.value)){
                        alert(rateName[pbDatName[mIdx]][rIdx] + " in Power Boost settings is incorrect!\nPlease enter an integer number between -9 to 99 inclusive.");
                        inp.focus();
                        inp.select();
                        return false;
                    }
                    pbMergedStr += inpVal;
                    if(rIdx != rateName[pbDatName[mIdx]].length - 1){
                        pbMergedStr += ":";
                    }
                }
                document.getElementById(pbDatName[mIdx]).value = pbMergedStr;
            }
            return true;
        }

        function togglePowerBoost(flag)
        {
            var pbApplyBtnRow = document.getElementById("__applyPbRow");
            var pbApplyBtn = document.getElementById("__applyPb");
            var modName = ["CCK_OFDM","HT20","HT40","VHT20","VHT40","VHT80","VHT160"];
            var rateName = {
                CCK_OFDM:["CCK_1M2M","CCK_5M11M","OFDM_6M_9M","OFDM_12M_18M","OFDM_24M_36M","OFDM_48M","OFDM_54M"],
                HT20:["HT20_MCS0","None","HT20_MCS1_2","HT20_MCS3_4","HT20_MCS5","HT20_MCS6","HT20_MCS7"],
                HT40:["HT40_MCS0","HT40_MCS32","HT40_MCS1_2","HT40_MCS3_4","HT40_MCS5","HT40_MCS6","HT40_MCS7"],
                VHT20:["VHT20_MCS0","VHT20_MCS1_2","VHT20_MCS3_4","VHT20_MCS5_6","VHT20_MCS7","VHT20_MCS8","VHT20_MCS9"],
                VHT40:["VHT40_BPSK","VHT40_QPSK","VHT40_16QAM","VHT40_64QAM_MSC5_6","VHT40_64QAM_MSC7","VHT40_64QAM_MSC8","VHT40_64QAM_MSC9"],
                VHT80:["VHT80_BPSK","VHT80_QPSK","VHT80_16QAM","VHT80_64QAM_MSC5_6","VHT80_64QAM_MSC7","VHT80_64QAM_MSC8","VHT80_64QAM_MSC9"],
                VHT160:["VHT160_BPSK","VHT160_QPSK","VHT160_16QAM","VHT160_64QAM_MSC5_6","VHT160_64QAM_MSC7","VHT160_64QAM_MSC8","VHT160_64QAM_MSC9"]
            };
            if(flag == "1"){
                for (var mIdx = 0; mIdx < modName.length; mIdx++){
                    for(var rIdx = 0; rIdx < rateName[modName[mIdx]].length ; rIdx++){
                        document.getElementById(rateName[modName[mIdx]][rIdx]).disabled = false;
                    }
                    document.getElementById("pb_text_row_hdng_" + modName[mIdx]).style.display = "";
                    document.getElementById("pb_text_row_sub_hdng_" + modName[mIdx]).style.display = "";
                    document.getElementById("pb_input_row_" + modName[mIdx]).style.display = "";
                }
                pbApplyBtnRow.style.display = "";
                pbApplyBtn.disabled = false;
            }
            else{
                for (var mIdx = 0; mIdx < modName.length; mIdx++){
                    for(var rIdx = 0; rIdx < rateName[modName[mIdx]].length ; rIdx++){
                        document.getElementById(rateName[modName[mIdx]][rIdx]).disabled = true;
                    }
                    document.getElementById("pb_text_row_hdng_" + modName[mIdx]).style.display = "none";
                    document.getElementById("pb_text_row_sub_hdng_" + modName[mIdx]).style.display = "none";
                    document.getElementById("pb_input_row_" + modName[mIdx]).style.display = "none";
                }
                pbApplyBtnRow.style.display = "none";
                pbApplyBtn.disabled = true;
            }
        }

        function initPowerBoost()
        {
            var row1,row2,cell,inp;
            var pbValArr = [];
            var isPbEnabled = ("<%=cfgs.PowerUpenable%>" == "1") ? true : false;
            var pbTableId = document.getElementById('dev-cfg-power_boost');
            var modName = ["CCK_OFDM","HT20","HT40","VHT20","VHT40","VHT80","VHT160"];
            var rateName = {
                CCK_OFDM:["CCK_1M2M","CCK_5M11M","OFDM_6M_9M","OFDM_12M_18M","OFDM_24M_36M","OFDM_48M","OFDM_54M"],
                HT20:["HT20_MCS0","None","HT20_MCS1_2","HT20_MCS3_4","HT20_MCS5","HT20_MCS6","HT20_MCS7"],
                HT40:["HT40_MCS0","HT40_MCS32","HT40_MCS1_2","HT40_MCS3_4","HT40_MCS5","HT40_MCS6","HT40_MCS7"],
                VHT20:["VHT20_MCS0","VHT20_MCS1_2","VHT20_MCS3_4","VHT20_MCS5_6","VHT20_MCS7","VHT20_MCS8","VHT20_MCS9"],
                VHT40:["VHT40_BPSK","VHT40_QPSK","VHT40_16QAM","VHT40_64QAM_MSC5_6","VHT40_64QAM_MSC7","VHT40_64QAM_MSC8","VHT40_64QAM_MSC9"],
                VHT80:["VHT80_BPSK","VHT80_QPSK","VHT80_16QAM","VHT80_64QAM_MSC5_6","VHT80_64QAM_MSC7","VHT80_64QAM_MSC8","VHT80_64QAM_MSC9"],
                VHT160:["VHT160_BPSK","VHT160_QPSK","VHT160_16QAM","VHT160_64QAM_MSC5_6","VHT160_64QAM_MSC7","VHT160_64QAM_MSC8","VHT160_64QAM_MSC9"]
            };
            var pbObj = {
                PBCCK:"<%=cfgs.PowerUpCckOfdm%>",
                PBHT20:"<%=cfgs.PowerUpHT20%>",
                PBHT40:"<%=cfgs.PowerUpHT40%>",
                PBVHT20:"<%=cfgs.PowerUpVHT20%>",
                PBVHT40:"<%=cfgs.PowerUpVHT40%>",
                PBVHT80:"<%=cfgs.PowerUpVHT80%>",
                PBVHT160:"<%=cfgs.PowerUpVHT160%>"
            };
            for(var k in pbObj){
                pbValArr.push(pbObj[k].split(":"));
            }
            // Build Power Boost rows
            for (var mIdx = 0; mIdx < modName.length; mIdx++){
                row_txt = pbTableId.insertRow(pbTableId.rows.length - 2); //Last two rows are reserved for Apply button and Loading image
                row_txt.id = "pb_text_row_hdng_" + modName[mIdx];
                cell = row_txt.insertCell(-1);
                cell.colSpan = rateName[modName[mIdx]].length;
                cell.innerHTML = "<strong>" + modName[mIdx] + "</strong>";
                cell.style.textAlign = "center";
                if(!isPbEnabled){
                    row_txt.style.display="none";
                }
                row_txt = pbTableId.insertRow(pbTableId.rows.length - 2);
                row_inp = pbTableId.insertRow(pbTableId.rows.length - 2);
                row_txt.id = "pb_text_row_sub_hdng_" + modName[mIdx];
                row_inp.id = "pb_input_row_" + modName[mIdx];

                for(var rIdx=0; rIdx < rateName[modName[mIdx]].length ; rIdx++){
                    cell = row_txt.insertCell(-1);
                    cell.innerHTML = rateName[modName[mIdx]][rIdx];
                    cell = row_inp.insertCell(-1);
                    inp = document.createElement("INPUT");
                    inp.setAttribute("type", "text");
                    inp.id = rateName[modName[mIdx]][rIdx];
                    inp.value = (pbValArr[mIdx][rIdx] && pbValArr[mIdx][rIdx] != "") ? pbValArr[mIdx][rIdx] : "0";
                    inp.size = 2;
                    cell.appendChild(inp);
                    if(!isPbEnabled){
                        row_txt.style.display="none";
                        row_inp.style.display="none";
                        inp.disabled=true;
                    }
                }
            }
        }

        function applyPowerBoostSettings(pbApplyBtn)
        {
            pbApplyBtn.disabled = true;
            if(ValidatePowerBoost()){
                var userPbSettingsWithDevName = {
                    "__devname":"<%=devname%>",
                    "PowerUpenable":document.getElementById("pbDisable").checked ? "0" : "1",
                    "PowerUpCckOfdm":document.getElementById("PowerUpCckOfdm").value,
                    "PowerUpHT20":document.getElementById("PowerUpHT20").value,
                    "PowerUpHT40":document.getElementById("PowerUpHT40").value,
                    "PowerUpVHT20":document.getElementById("PowerUpVHT20").value,
                    "PowerUpVHT40":document.getElementById("PowerUpVHT40").value,
                    "PowerUpVHT80":document.getElementById("PowerUpVHT80").value,
                    "PowerUpVHT160":document.getElementById("PowerUpVHT160").value
                };
                var pbLodingRow = document.getElementById("__pbLoadingRow");
                pbLodingRow.style.display = "";
                (new XHR()).post("<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "apply_power_boost_settings")%>",
                    userPbSettingsWithDevName,
                    function(x) {
                        try{
                            var res = JSON.parse(x.response);
                            if(res["status"] == "SUCCESS"){
                                alert("Power Boost Settings have been applied successfully.");
                            }else{
                                alert("Failed to apply Power Boost settings!\nError: "+res["status"]);
                            }
                        }
                        catch(e){
                                alert("Failed to apply Power Boost settings!\nError: Incorrect response received!");
                        }
                        finally{
                            pbLodingRow.style.display = "none";
                            pbApplyBtn.disabled = false;
                        }
                    }
                );
            }
            else{
                pbApplyBtn.disabled = false;
            }
        }
    <% end %>

    function ValidateAdvancedSettings()
    {
        var tmpVal = document.getElementById("BeaconPeriod").value;
        if(isNaN(tmpVal) || !/^\d{2,3}$/.test(tmpVal) || parseInt(tmpVal) < 20 || parseInt(tmpVal) > 999){
            alert("Beacon Interval is incorrect!\nPlease enter an integer number between 20 to 999 inclusive.");
            document.getElementById("BeaconPeriod").focus();
            document.getElementById("BeaconPeriod").select();
            return false;
        }
        tmpVal = document.getElementById("DtimPeriod").value;
        if(isNaN(tmpVal) || !/^\d{1,3}$/.test(tmpVal) || parseInt(tmpVal) < 1 || parseInt(tmpVal) > 255){
            alert("Data Beacon Rate (DTIM) is incorrect!\nPlease enter an integer number between 1 to 255 inclusive.");
            document.getElementById("DtimPeriod").focus();
            document.getElementById("DtimPeriod").select();
            return false;
        }
        tmpVal = document.getElementById("FragThreshold").value;
        if(isNaN(tmpVal) || !/^\d{3,4}$/.test(tmpVal) || parseInt(tmpVal) < 256 || parseInt(tmpVal) > 2346){
            alert("Fragmentation Threshold is incorrect!\nPlease enter an integer number between 256 to 2346 inclusive.");
            document.getElementById("FragThreshold").focus();
            document.getElementById("FragThreshold").select();
            return false;
        }
        tmpVal = document.getElementById("RTSThreshold").value;
        if(isNaN(tmpVal) || !/^\d{1,4}$/.test(tmpVal) || parseInt(tmpVal) < 1 || parseInt(tmpVal) > 2347){
            alert("RTS Threshold is incorrect!\nPlease enter an integer number between 1 to 2347 inclusive.");
            document.getElementById("RTSThreshold").focus();
            document.getElementById("RTSThreshold").select();
            return false;
        }
        tmpVal = document.getElementById("TxPower").value;
        if(isNaN(tmpVal) || !/^\d{1,3}$/.test(tmpVal) || parseInt(tmpVal) < 1 || parseInt(tmpVal) > 100){
            alert("TX Power is incorrect!\nPlease enter an integer number between 1 to 100 inclusive.");
            document.getElementById("TxPower").focus();
            document.getElementById("TxPower").select();
            return false;
        }
        return true;
    }

    /* Functions used for WDS must be written inside the below check */
    <% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
        function CheckWdsEncKey(i)
        {
            var key = document.getElementById("Wds" + i + "Key").value;
            if (document.getElementById("__wds_encryp_type"+i).selectedIndex == 1) {
                if (key.length == 10 || key.length == 26) {
                    var re = /[A-Fa-f0-9]{10,26}/;
                    if (!re.test(key)) {
                        alert("WDS"+i+"Key should be a 10/26 hexdecimal or a 5/13 ascii");
                        document.getElementById("Wds" + i + "Key").focus();
                        document.getElementById("Wds" + i + "Key").select();
                        return false;
                    }
                    else
                        return true;
                }
                else if (key.length == 5 || key.length == 13) {
                    return true;
                }
                else {
                    alert("WDS"+i+"Key should be a 10/26 hexdecimal or a 5/13 ascii");
                    document.getElementById("Wds" + i + "Key").focus();
                    document.getElementById("Wds" + i + "Key").select();
                    return false;
                }
            }
            else if (document.getElementById("__wds_encryp_type"+i).selectedIndex == 2 ||
                    document.getElementById("__wds_encryp_type"+i).selectedIndex == 3){
                if (key.length < 8 || key.length > 64) {
                    alert("WDS"+i+"Key should be with length 8~64");
                    document.getElementById("Wds" + i + "Key").focus();
                    document.getElementById("Wds" + i + "Key").select();
                    return false;
                }
                else if (key.length == 64) {
                    var re = /[A-Fa-f0-9]{64}/;
                    if (!re.test(key)) {
                        alert("WDS"+i+"Key should be a 64 hexdecimal");
                        document.getElementById("Wds" + i + "Key").focus();
                        document.getElementById("Wds" + i + "Key").select();
                        return false;
                    }
                    else
                        return true;
                }
                else
                    return true;
            }
            return true;
        }

        function ValidateWdsForm()
        {
            var all_wds_list = "";
            var all_enc_type = "";
            if(document.getElementById("WdsEnable").selectedIndex == 0){
                return true;
            }
            for(var i=0; i < 4; i++){
                all_enc_type += document.getElementById("__wds_encryp_type"+i).value;
                if(i != 3){
                    all_enc_type += ';';
                }
            }
            document.getElementById("WdsEncrypType").value = all_enc_type;
            if (!CheckWdsEncKey(0) || !CheckWdsEncKey(1) || !CheckWdsEncKey(2) || !CheckWdsEncKey(3)){
                return false;
            }
            if (document.getElementById("WdsEnable").selectedIndex >= 2){
                var re = /[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}/;
                for (var i = 0; i < 4; i++){
                    if (document.getElementById("__wds_mac_"+i).value == ""){
                        continue;
                    }
                    if (!re.test(document.getElementById("__wds_mac_"+i).value)) {
                        alert("Please fill WDS remote AP MAC Address in correct format! (XX:XX:XX:XX:XX:XX)");
                        document.getElementById("__wds_mac_"+i).focus();
                        document.getElementById("__wds_mac_"+i).select();
                        return false;
                    }
                    else {
                        all_wds_list += document.getElementById("__wds_mac_"+i).value;
                        all_wds_list += ';';
                    }
                }
                if (all_wds_list == ""){
                    alert("WDS remote AP MAC Address are empty !!!");
                    document.getElementById("__wds_mac_0").focus();
                    document.getElementById("__wds_mac_0").select();
                    return false;
                }
                else{
                    document.getElementById("WdsList").value = all_wds_list;
                    for(i=0; i < 4; i++){
                        document.getElementById("__wds_mac_"+i).disabled = true;
                    }
                }
            }
            return true;
        }

        function WdsSecurityOnChange(i,encType)
        {
            if(encType == "NONE"){
                document.getElementById("Wds" + i + "Key").disabled =true;
            }
            else{
                document.getElementById("Wds" + i + "Key").disabled =false;
            }
        }

        function WdsModeOnChange(wdsMode)
        {
            switch(parseInt(wdsMode,10)){
                case 0:
                    document.getElementById("row-wds-phy-mode").style.display="none";
                    document.getElementById("WdsPhyMode").disabled=true;
                    for(var i=0; i < 4; i++){
                        document.getElementById("row-wds-enc-type"+i).style.display="none";
                        document.getElementById("__wds_encryp_type"+i).disabled=true;
                        document.getElementById("row-wds-enc-key"+i).style.display="none";
                        document.getElementById("Wds" + i + "Key").disabled=true;
                        document.getElementById("row-wds-ap-mac-addr"+i).style.display="none";
                        document.getElementById("__wds_mac_"+i).disabled=true;
                    }
                break;
                case 4:
                    document.getElementById("row-wds-phy-mode").style.display="";
                    document.getElementById("WdsPhyMode").disabled=false;
                    for(var i=0; i < 4; i++){
                        document.getElementById("row-wds-enc-type"+i).style.display="";
                        document.getElementById("__wds_encryp_type"+i).disabled=false;
                        document.getElementById("row-wds-enc-key"+i).style.display="";
                        WdsSecurityOnChange(i,document.getElementById("__wds_encryp_type"+i).value);
                        document.getElementById("row-wds-ap-mac-addr"+i).style.display="none";
                        document.getElementById("__wds_mac_"+i).disabled=true;
                    }
                break;
                case 2:
                case 3:
                    document.getElementById("row-wds-phy-mode").style.display="";
                    document.getElementById("WdsPhyMode").disabled=false;
                    for(var i=0; i < 4; i++){
                        document.getElementById("row-wds-enc-type"+i).style.display="";
                        document.getElementById("__wds_encryp_type"+i).disabled=false;
                        document.getElementById("row-wds-enc-key"+i).style.display="";
                        WdsSecurityOnChange(i,document.getElementById("__wds_encryp_type"+i).value);
                        document.getElementById("row-wds-ap-mac-addr"+i).style.display="";
                        document.getElementById("__wds_mac_"+i).disabled=false;
                    }
                break;
                default:
                    console.log("Unknwon WDS Mode : ",wdsMode);
            }
        }

        function updateWdsPhyMode(wirelessMode){
            var wirelessModeSelect = document.getElementById('WirelessMode');
            var wdsPhyModeSelect = document.getElementById("WdsPhyMode");
            wirelessMode *= 1;
            document.getElementById("__wdsPhyModeMsg").innerHTML = "";
            for(var idx=0; idx < wdsPhyModeSelect.length; idx++){
                wdsPhyModeSelect.options[idx].disabled = false;
                switch(wdsPhyModeSelect.options[idx].text){
                    case "CCK":
                        // "G/GN" Wireless mode does not support CCK Phy Mode
                        if(wirelessMode == 7){
                            wdsPhyModeSelect.options[idx].disabled = true;
                            wdsPhyModeSelect.options[idx].selected = false;
                        }
                    break;
                    case "OFDM":
                        // "B only" Wireless mode does not support OFDM Phy Mode
                        if(wirelessMode == 1){
                            wdsPhyModeSelect.options[idx].disabled = true;
                            wdsPhyModeSelect.options[idx].selected = false;
                        }
                    break;
                    case "HTMIX":
                    case "GREENFIELD":
                        if(is_mode_legacy_only(wirelessMode)){
                            wdsPhyModeSelect.options[idx].disabled = true;
                            wdsPhyModeSelect.options[idx].selected = false;
                        }
                    break;
                    case "VHT":
                        if(wirelessMode >= 0 && wirelessMode <= 11){
                            wdsPhyModeSelect.options[idx].disabled = true;
                            wdsPhyModeSelect.options[idx].selected = false;
                        }
                    break;
                    default:
                        console.log("Unknown WDS PhyMode",wdsPhyModeSelect.options[idx].text);
                }
            }
            for(var idx=0; idx < wdsPhyModeSelect.length; idx++){
                if(wdsPhyModeSelect.options[idx].disabled){
                    document.getElementById("__wdsPhyModeMsg").innerHTML = "Disabled options are not supported by <strong>" + wirelessModeSelect.options[wirelessModeSelect.selectedIndex].text + "</strong> Wireless Mode";
                    break;
                }
            }
        }
    <% end %>

    function WirelessMode_onchange (mode) {
        var cr = GetCountryRegion(mode);

        getCountryRegionList(mode, cr);
        <% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
            updateWdsPhyMode(mode);
        <% end %>
    }

    function CountryCode_onchange(){
        var wMode = document.getElementById('WirelessMode').value;
        getCountryRegionList(wMode);
    }

    function CountryRegion_onchange(country_region) {
        var wmode_o = document.getElementById('WirelessMode');
        var wmode;

        if (wmode_o)
            wmode = wmode_o.value;

        if (wmode == "")
            wmode = "<%=cfgs.WirelessMode%>";

        getChannelList(wmode, country_region);
    }

    function Channel_onchange (ch) {
        getBw(null, ch);
    }

    function Bw_onchange(bw, ch) {
        var ch_val;

        if (!ch){
            var ch_o = document.getElementById('Channel');

            if (ch_o)
                ch_val = ch_o.value;

            if (ch_val == "")
                ch_val = "<%=cfgs.Channel%>";
        } else {
            ch_val = ch
        }

        get5G2nd80MhzChannelList(bw, ch_val);
        getHTExtChannel(bw, ch_val);
    }

    function disableCountryRegionAsPerCountryCode(){
        var wModeSelect = document.getElementById('WirelessMode');
        var wMode = wModeSelect.value;
        var cCode = document.getElementById('CountryCode').value;
        var cRegionSelect = document.getElementById('__cr');
        var invalidCR_2G = {
            US:[1,3,4,5,7,31,32,33],
            JP:[],
            FR:[4,5,31,33],
            TW:[1,3,4,5,7,31,32,33],
            IE:[4,5,31,33],
            HK:[4,5,31,33],
            NONE:[]
        };
        var invalidCR_5G = {
            US:[1,7,11,12,13,15,19,20,21,22,30,31,32,33,36,37],
            JP:[0,3,4,5,7,9,10,11,12,13,14,15,16,17,19,20,21,30,31,32,34,36,37],
            FR:[0,3,4,5,7,9,10,11,12,13,14,15,16,17,19,20,21,30,31,32,34,36,37],
            TW:[0,1,4,7,9,10,11,12,13,14,15,16,19,20,21,22,30,31,32,33,34,36,37],
            IE:[0,3,4,5,7,9,10,11,12,13,14,15,16,17,19,20,21,30,31,32,34,36,37],
            HK:[12,13,14,15,37],
            NONE:[]
        };
        document.getElementById("__cRegionMsg").innerHTML = "";
        if (is_mode_gband(wMode)){
            // Channel 14 should be disabled for all the Countries except JAPAN(JP) and NONE Country Code.
            // If WireleeMode is not in 'B only' mode, then Channel 14 should be disabled for Japan and NONE Country Code too.
            if(wMode != "1"){
                if(cCode == "JP"){
                    invalidCR_2G["JP"]=[4,5,31,33];
                }
                else if(cCode == "NONE"){
                    invalidCR_2G["NONE"]=[4,5,31,33];
                }
            }
            if((cCode == "JP" && invalidCR_2G["JP"].length > 0) ||
               (cCode == "NONE" && invalidCR_2G["NONE"].length > 0) ||
               ((cCode != "JP") && (cCode != "NONE"))){
                for(var idx=0; idx < cRegionSelect.length; idx++){
                    if(invalidCR_2G[cCode] && invalidCR_2G[cCode].indexOf(cRegionSelect.options[idx].value * 1) != -1){
                        cRegionSelect.options[idx].disabled = true;
                        cRegionSelect.options[idx].selected = false;
                    }
                }
                document.getElementById("__cRegionMsg").innerHTML = "Disabled options are not supported by <strong>" + cCode + 
"</strong> Country Code or <strong>" + wModeSelect.options[wModeSelect.selectedIndex].text +"</strong> Wireless Mode";
            }
        }
        else if (is_mode_aband(wMode) && cCode != "NONE"){
            for(var idx=0; idx < cRegionSelect.length; idx++){
                if(invalidCR_5G[cCode] && invalidCR_5G[cCode].indexOf(cRegionSelect.options[idx].value * 1) != -1){
                    cRegionSelect.options[idx].disabled = true;
                    cRegionSelect.options[idx].selected = false;
                }
            }
            document.getElementById("__cRegionMsg").innerHTML = "Disabled options are not supported by <strong>" + cCode + 
"</strong> Country Code or <strong>" + wModeSelect.options[wModeSelect.selectedIndex].text +"</strong> Wireless Mode";
        }
        return cRegionSelect.value;
    }

    function initCountryRegionList(list, mode){
        var select = document.getElementById('__cr');
        var cr = {};

        if (is_mode_gband(mode))
            cr = "<%=cfgs.CountryRegion%>";
        else if (is_mode_aband(mode))
            cr = "<%=cfgs.CountryRegionABand%>";

        var new_cr = initList(select, list, cr, "region");
        new_cr = disableCountryRegionAsPerCountryCode();
        CountryRegion_onchange(new_cr);
    }

    function getCountryRegionList(mode) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_country_region_list")%>', 'mode='+mode,
            function(x)
            {
                //console.log(x);
                //console.log(x.response);
                var json = eval(x.response);
                initCountryRegionList(json, mode);
            }
        );
    }

    function initChannelList(list) {
        /* choose auto select when no matching item in the lis */
        var select = document.getElementById('Channel');
        var ch = {};
        var new_ch = null;

        ch.cval = select.value;
        ch.oval = "<%=dev.Channel%>";

        var new_ch = initList(select, list, ch, "channel");
        Channel_onchange(new_ch);
    }

    function getChannelList(mode, country_region) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_channel_list")%>', 'mode='+mode+'&country_region='+country_region,
            function(x)
            {
                console.log(x);
                console.log(x.response);
                var json = eval(x.response);
                initChannelList(json);
            }
        );
    }

    function GetCountryRegion(mode) {
        var cr_o = document.getElementById('__cr');
        var cr = "";

        if (cr_o) {
            cr = cr_o.value;
        }

        if (cr == "") {
            if (is_mode_gband(mode)) {
                cr = "<%=cfgs.CountryRegion%>";
            } else if (is_mode_aband(mode)) {
                cr = "<%=cfgs.CountryRegionABand%>";
            } else {
                alert("Cannot get valid CountryRegion from invalid WireleeMode");
            }
        }

        return cr;
    }

    function getBw(mode, ch) {
        /* choose bw as wide as possible if modification is needed */
        var bw_sel = document.getElementById('__bw');
        var wModeSelect,wmode;

        wModeSelect = document.getElementById('WirelessMode');
        if (!mode) {
            wmode = wModeSelect.value*1;
        } else {
            wmode = mode*1;
        }
        document.getElementById("__chBwMsg").innerHTML = "";
        if (is_mode_legacy_only(wmode) || parseInt(ch) >= 165) {
            for (var idx=0; idx < bw_sel.length; idx++) {
                bw_sel.options[idx].disabled = false;

                if (bw_sel.options[idx].value == 20)
                    bw_sel.options[idx].selected = true;

                if (bw_sel.options[idx].value > 20)
                    bw_sel.options[idx].disabled = true;
            }
        } else if (is_ch_gband(ch)) {
            for (var idx=0; idx < bw_sel.length; idx++) {
                bw_sel.options[idx].disabled = false;

                if ((bw_sel.options[idx].value == 60) && (bw_sel.selectedIndex > idx))
                    bw_sel.options[idx].selected = true;

                if (bw_sel.options[idx].value > 60)
                    bw_sel.options[idx].disabled = true;
            }
        } else if (is_ch_aband(ch)) {
            var chosen60 = false;
            var bw160 = "<%=cfgs.VHT_BW%>"*1;

            if (bw_sel.value == 60)
                chosen60 = 1;

            for (var idx=0; idx < bw_sel.length; idx++) {
                bw_sel.options[idx].disabled = false;

                if (bw_sel.options[idx].value == 40 && chosen60 && bw160 == 0) {
                    bw_sel.options[idx].selected = true;
                } else if (bw_sel.options[idx].value == 60) {
                    bw_sel.options[idx].disabled = true;
                    bw_sel.options[idx].selected = false;
                } else if (wmode == 8 && bw_sel.options[idx].value == 80) {
                    bw_sel.options[idx].disabled = true;
                    bw_sel.options[idx].selected = false;
                } else if (bw_sel.options[idx].value == 160 && chosen60 && bw160 == 1) {
                    bw_sel.options[idx].selected = true;
                }
            }
        }
        var invalidChBwList = '<%=(dev.invalidChBwList and table.concat(dev.invalidChBwList,";"))%>'.split(";");
        if(invalidChBwList.length > 0){
            for (var idx=0; idx < bw_sel.length; idx++) {
                if(invalidChBwList.indexOf(bw_sel.options[idx].value) != -1){
                    bw_sel.options[idx].disabled = true;
                    bw_sel.options[idx].selected = false;
                }
            }
        }
        for (var idx=0; idx < bw_sel.length; idx++) {
            if(bw_sel.options[idx].disabled){
                document.getElementById("__chBwMsg").innerHTML = "Disabled options are not supported by <strong>" + "<%=dev.devname%>" + 
"</strong> device or <strong>" + wModeSelect.options[wModeSelect.selectedIndex].text + "</strong> Wireless Mode or Channel <strong>" + ch +"</strong>";
                break;
            }
        }
        Bw_onchange(bw_sel.value, ch);
    }

    function init5G2nd80MhzChannelList(list,ch,cr) {
        var select = document.getElementById('VHT_Sec80_Channel');
        var ch2 = {};
        var new_ch2 = null;

        ch2.cval = select.value;
        ch2.oval = "<%=cfgs.VHT_Sec80_Channel%>";

        initList(select, list, ch2, "channel");

        if (select.length > 0)
            select.disabled = false;
        else
            alert("[Warning] No 80Mhz Second VHT Channels are available as per selected Channel "+ch+" and CountryRegion "+cr+" !");
    }

    function get5G2nd80MhzChannelList(bw, ch) {
        var ch_5g_2nd = document.getElementById('VHT_Sec80_Channel');

        ch_5g_2nd.disabled = true;

        if (ch == "0")
            return;

        if (bw != "161" || ch == "0")
            return;

        var mode = document.getElementById('WirelessMode');
        mode = mode.value*1;

        var cr = GetCountryRegion(mode);
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_5G_2nd_80Mhz_channel_list")%>', 'ch_cur='+ch+'&country_region='+cr,
            function(x)
            {
                //console.log(x);
                //console.log(x.response);
                var json = eval(x.response);
                init5G2nd80MhzChannelList(json,ch,cr);
            }
        );
        }

    function initHTExtChannelList(list,ch,cr) {
        var select = document.getElementById('HT_EXTCHA');
        var ch2 = {};
        var new_ch2 = null;

        ch2.cval = select.value;
        ch2.oval = "<%=cfgs.HT_EXTCHA%>";

        initList(select, list, ch2, "val");

        if (select.length > 0)
            select.disabled = false;
        else
            alert("[Warning] No 40MHz HT Extended Channels are available as per selected Channel "+ch+" and CountryRegion "+cr+" !");
    }

    function getHTExtChannel(bw, ch) {
        var ch_2g_ext = document.getElementById('HT_EXTCHA');

        ch_2g_ext.disabled = true;

        if (ch == "0" || parseInt(ch) >= 165)
            return;

        if (bw != "40" && bw != "60")
            return;

        var mode = document.getElementById('WirelessMode');
        mode = mode.value*1;

        var cr = GetCountryRegion(mode);
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_HT_ext_channel_list")%>', 'ch_cur='+ch+'&country_region='+cr,
            function(x)
            {
                console.log(x);
                console.log(x.response);
                var json = eval(x.response);
                initHTExtChannelList(json,ch,cr);
            }
        );
    }

    function toggle_atf(o) {
        if (o.getAttribute("value") == "1") {
            document.getElementById("VOW_Airtime_Fairness_En").value = "0";
            o.setAttribute("value", "0");
            o.className = "cbi-button cbi-button-add";
            o.innerHTML = "Enable ATC";
        } else {
            document.getElementById("VOW_Airtime_Fairness_En").value = "1";
            o.setAttribute("value", "1");
            o.className = "cbi-button cbi-button-remove";
            o.innerHTML = "Disable ATC";
        }
    }

    function toggle_atc(o) {
        if (o.getAttribute("value") == "1") {
            document.getElementById("VOW_BW_Ctrl").value = "0";
            o.setAttribute("value", "0");
            o.className = "cbi-button cbi-button-add";
            o.innerHTML = "Enable ATC";
            document.getElementById("atc-table").style.display = "none";
        } else {
            document.getElementById("VOW_BW_Ctrl").value = "1";
            o.setAttribute("value", "1");
            o.className = "cbi-button cbi-button-remove";
            o.innerHTML = "Disable ATC";
            document.getElementById("atc-table").style.display = "";
        }
    }

    function is_mode_legacy_only(mode) {
        var imode = mode*1;

        return ((imode >= 0) && (imode <= 4));
    }

    function is_mode_gband(mode) {
        var imode = mode*1;
        var gband_mode_list = [0,1,4,6,7,9];
        var i;

        for (i = 0; i < gband_mode_list.length; i++){
            if( gband_mode_list[i] == imode )
                return true;
        }

        return false;
    }

    function is_mode_aband(mode) {
        var imode = mode*1;
        var aband_mode_list = [2,8,11,14,15];
        var i;

        for (i = 0; i < aband_mode_list.length; i++){
            if( aband_mode_list[i] == imode )
                return true;
        }

        return false;
    }

    function is_ch_gband(ch) {
        ch = ch*1;

        if (ch == 0) {
            var wmode = document.getElementById('WirelessMode');

            return is_mode_gband(wmode.value);
        }

        return ((ch > 0) && (ch <= 14));
    }

    function is_ch_aband(ch) {
        ch = ch*1;

        if (ch == 0) {
            var wmode = document.getElementById('WirelessMode');

            return is_mode_aband(wmode.value);
        }

        return ((ch >= 36 ) && (ch <= 165));
    }

    function initList(selobj, list, selvals, value, text){
        var sel = {};
        var id = selobj.id;

        if (typeof(selvals) != "object")
            sel[0] = selvals;
        else
            sel = selvals;

        selobj.innerHTML = "";
        for (var i in list) {
            var opt = document.createElement('option');

            if(value)
                opt.value = list[i][value];
            else
                opt.value = list[i].value;

            if(text)
                opt.text = list[i][text];
            else
                opt.text = list[i].text;

            selobj.appendChild(opt);
        }

        var selv = null;
        for (var k in sel) {
            //console.log("[initList][" + id + "] sel[" + k + "]=" + sel[k]);
            for (var i=0; i < selobj.length; i++){
                if (selobj.options[i].value == sel[k]){
                    selobj.options[i].selected = true;
                    selv = sel[k];
                    //console.log("[initList][" + id + "] found selv=" + selv);
                    break;
                }
            }

            if (selv) break;
        }

        if (!selv) {
            selv = selobj.value;
            //console.log("[initList][" + id + "] !selv, selv=" + selv);
        }

        return selv;
    }

    function ValidateAllSettings(){
        if( !ValidateAdvancedSettings() ){
            return false;
        }
        <% if not dev.wdsBand or dev.wdsBand == dev.dbdcBandName then %>
            if( !ValidateWdsForm() ){
                return false;
            }
        <% end %>
        <% if dev.isPowerBoostSupported then%>
            if( !ValidatePowerBoost() ){
                return false;
            }
        <% end %>
        return true;
    }

    function update_easymesh_profile_fields(obj_1905)
    {
        var vifsMacList=[];
        var WirelessModeListJS = {};

        <% for _,vif in ipairs(dev.vifs) do %>
            <% if vif.state == "up" then%>
                <% local bssid = vif.__bssid and vif.__bssid:sub(1,17) or ""%>
                <% if bssid and bssid ~= "" then %>
                    vifsMacList.push("<%=bssid%>");
                    WirelessModeListJS['<%=bssid%>'] = {};
                    <% for wModeIdx, wModeStr in pairs(dev.WirelessModeList) do %>
                        WirelessModeListJS['<%=bssid%>']['<%=wModeIdx%>'] = "<%=wModeStr%>";
                    <% end %>
                <% end %>
            <% end %>
        <% end %>


        if(!obj_1905.hasOwnProperty('Radio Info')){
            console.log("Topology does not have Radio Info Property!",obj_1905);
            return;
        }

        var wmode_span = document.getElementById("EASY_MESH_WMODE_SPAN");
        var channel_span = document.getElementById("EASY_MESH_CHANNEL_SPAN");

        if (!wmode_span || !channel_span){
            console.log("Failed to update EasyMesh profile fields! Could not find the fields to update!");
            return;
        }
        for (var vifIdx = 0; vifIdx < vifsMacList.length; vifIdx++){
            var radioIdx;
            for (radioIdx=0; radioIdx < obj_1905['Radio Info'].length; radioIdx++){
                var radioInfoObj = obj_1905['Radio Info'][radioIdx];
                var bssInfoArr = radioInfoObj['BSSINFO'];
                var bssIdx;
                for(bssIdx=0; bssIdx < bssInfoArr.length; bssIdx++){
                    var bssInfo = bssInfoArr[bssIdx];
                    if(bssInfo.hasOwnProperty('BSSID') && (bssInfo['BSSID'].toUpperCase() == vifsMacList[vifIdx].toUpperCase())){
                        channel_span.innerHTML = radioInfoObj['channel'];
                        var wModeIdxJS = radioInfoObj['wireless mode'];
                        if(WirelessModeListJS[vifsMacList[vifIdx]].hasOwnProperty(wModeIdxJS)){
                            wmode_span.innerHTML = WirelessModeListJS[vifsMacList[vifIdx]][wModeIdxJS];
                        }
                        else{
                            wmode_span.innerHTML = wModeIdxJS;
                            console.log("WirelessMode "+ wModeIdxJS +" is NOT valid for "+vifsMacList[vifIdx]);
                        }
                        document.getElementById("DEV_CFG_BASIC_SETTINGS").style.display = "none";
                        document.getElementById("EASY_MESH_DEV_SETTINGS_TBODY").style.display = "";
                        break;
                    }
                }
                if(bssIdx < bssInfoArr.length){
                    break;
                }
            }
            if(radioIdx < obj_1905['Radio Info'].length){
                break;
            }
        }
    }

    function find_own_topo_info(devRole, jsTopoInfo, alMac)
    {
        var tree_info = [];
        var topoInfoArr = jsTopoInfo['topology information'];
        if(!(topoInfoArr instanceof Array)){
            console.log("Incorrect TopologyInfo: Value of topology information is not an Array!");
            return;
        }
        for(var idx_1905=0; idx_1905 < topoInfoArr.length; idx_1905++){
            var obj_1905 = topoInfoArr[idx_1905];
            if (obj_1905.hasOwnProperty('AL MAC') && (obj_1905['AL MAC'].toUpperCase() == alMac.toUpperCase())){
                update_easymesh_profile_fields(obj_1905);
                return;
            }
        }
        console.log(alMac," AL-MAC NOT FOUND in Topology! Topology: ",jsTopoInfo);
    }

    function get_al_mac(devRole, jsTopoInfo)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_al_mac")%>' + '/' + devRole, null, 
            function(x)
            {
                console.log(x);
                try{
                    var r = JSON.parse(x.response);
                    var mac_reg_exp = /[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}:[A-Fa-f0-9]{2}/;
                    if (r['status'] == "SUCCESS" && mac_reg_exp.test(r['al_mac'])) {
                        find_own_topo_info(devRole, jsTopoInfo, r['al_mac']);
                    }
                    else{
                        console.log("Incorrect AL-MAC received!",r['status'],r['al_mac']);
                    }
                }
                catch(e){
                    console.log("Incorrect response received for get AL-MAC request!",e.name,e.message);
                }
            }
        );
    }

    function get_run_time_topology(devRole)
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_runtime_topology")%>', null, 
            function(x)
            {
                try{
                    var r = JSON.parse(x.response);
                    if(r.status == "SUCCESS"){
                        var jsTopoInfo = JSON.parse(r['luaTopologyInfo']);
                        get_al_mac(devRole, jsTopoInfo);
                    }
                    else{
                        console.log("Failed to get Topology Info!\nStatus: ",r.status);
                    }
                }
                catch(e){
                    console.log("Incorrect response! Failed to get Topology Info!",e.name,e.message);
                }
            }
        );
    }

    function get_device_role()
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "multi_ap", "get_device_role")%>', null, 
            function(x)
            {
                console.log(x);
                try{
                    var devRoleObj = JSON.parse(x.response);
                    var devRole = parseInt(devRoleObj.mapDevRole);
                    if(devRole != 1 && devRole != 2){
                        console.log("EasyMesh Device Role is neither Controller nor Agent!");
                        return;
                    }
                    document.getElementById("EASYMESH_WARNING_MSG").style.display = "";
                    get_run_time_topology(devRole);
                }
                catch(e){
                    console.log("Incorrect response received for get device role request!",e.name,e.message);
                }
            }
        );
    }

    function check_update_easymesh_profile()
    {
        <% if not pcall(require, "map_helper") then %>
            console.log("map_helper library is not available!");
            return;
        <% else %>
            <%if not map_cfgs then %>
                console.log("EasyMesh Configurations are not available!");
                return;
            <% end %>
            <% if (not appliedMapEnableDiff and map_cfgs.MapEnable == "1") or
                (appliedMapEnableDiff and appliedMapEnableDiff == "1" and map_cfgs.MapEnable ~= "1") then %>
                get_device_role();
            <% end %>
        <% end %>
    }

    function get_apply_status_cb(rsp)
    {
        try{
            var r = JSON.parse(rsp);
        }
        catch(e){
            return;
        }
        if(r.status == "ON_PROGRESS"){
            var u = confirm("Device is applying the saved settings now!\n" +
                "It is recommended to wait until all the saved settings are applied.\n" +
                "Please click on 'OK' button to wait for the device.\n" +
                "or click on 'Cancel' button to configure the settings available in current web-page.");
            if (u == true) {
                location = '<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "loading")%>' + window.location.pathname;
            }
        }
    }

    function get_apply_status()
    {
        XHR.get('<%=luci.dispatcher.build_url("admin", "mtk", "wifi", "get_apply_status")%>', null,
            function(x)
            {
                console.log(x);
                get_apply_status_cb(x.response);
            }
        );
    }

    window.onload = function() {
        MonCon.ping();
        get_apply_status();
        WirelessMode_onchange('<%=dev.WirelessMode%>');
        <% if dev.isPowerBoostSupported then%>
            initPowerBoost();
        <% end %>
        check_update_easymesh_profile();
    }

</script>

<%+footer%>
