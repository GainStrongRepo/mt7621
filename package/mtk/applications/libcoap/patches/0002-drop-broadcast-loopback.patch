--- a/include/coap/net.h
+++ b/include/coap/net.h
@@ -162,6 +162,9 @@ typedef struct coap_context_t {
   unsigned int keepalive_interval; /**< Minimum interval before sending a keepalive message. 0 means disabled. */
 
   void *app;                    /**< application-specific data */
+
+  uint32_t filter_ip1;
+  uint32_t filter_ip2;
 } coap_context_t;
 
 /**
--- a/src/net.c
+++ b/src/net.c
@@ -1195,6 +1195,38 @@ coap_read_endpoint(coap_context_t *ctx, 
     coap_address_init(&packet->src);
     coap_address_copy(&packet->dst, &endpoint->bind_addr);
     bytes_read = ctx->network_read(&endpoint->sock, packet);
+
+    if (packet->dst.addr.sa.sa_family == AF_INET)
+    {
+      if (packet->src.addr.sin.sin_addr.s_addr == packet->dst.addr.sin.sin_addr.s_addr)
+      {
+        if (packet->src.addr.sin.sin_addr.s_addr == ctx->filter_ip1 ||
+            packet->src.addr.sin.sin_addr.s_addr == ctx->filter_ip2)
+                bytes_read = -1;
+      }
+    }
+    else if (packet->dst.addr.sa.sa_family == AF_INET6)
+    {
+      if (IN6_IS_ADDR_V4MAPPED(&packet->dst.addr.sin6.sin6_addr))
+      {
+        uint32_t src_addr, dst_addr;
+
+#ifndef s6_words
+#define s6_words s6_addr16
+#endif
+
+        memcpy(&src_addr, &packet->src.addr.sin6.sin6_addr.s6_words[6], 4);
+        memcpy(&dst_addr, &packet->dst.addr.sin6.sin6_addr.s6_words[6], 4);
+
+        if (src_addr == dst_addr)
+        {
+            if (src_addr == ctx->filter_ip1 ||
+                src_addr == ctx->filter_ip2)
+                    bytes_read = -1;
+        }
+      }
+    }
+    
   }
 
   if (bytes_read < 0) {
